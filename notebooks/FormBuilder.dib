#!markdown

### Get Strings from JSON into CSV

Run this to generate a csv of strings to add. Add them, then run the next step

#!pwsh

$ErrorActionPreference = "stop"

$form = gc -raw ~/code/ConditionalForms/src/test/hras/hra-heart-health.json | convertfrom-json -depth 10

$strings = @{}
$guid = [Guid]::Empty

function setString($theValue,$name) {
    if (!$name) {
        $name = $theValue
    }
    if (!$theValue) {
        $strings["<empty>"] = "empty";
    } else {
        if ( ![Guid]::TryParse($theValue, [ref] $guid ) ) {
            $strings[$theValue] = $name;
        }
    }
}

foreach ( $s in $form.steps )
{
    setString $s.nameId "hra_$($s.Name)_step"
    if (Get-Member -Input $s -Name "nextText") {
        setString $s.nextText
    }
    if (Get-Member -Input $s -Name "backText") {
        setString $s.backText
    }
    foreach ( $v in $s.values)
    {
        setString $v.displayName $v.name
        if (Get-Member -InputObject $v -Name "description") {
            $v.description = setString $v.description $v.name
        }
        if (Get-Member -InputObject $v -Name "placeholder") {
            $v.placeholder = setString $v.placeholder $v.name
        }
        if (Get-Member -InputObject $v -Name "subtitle") {
            $v.subtitle = setString $v.subtitle $v.name
        }
        switch ($v.type) {
            "singleSelect" {
                foreach ( $o in $v.options)
                {
                    setString $o.label
                }
            }
            "multiSelect" {
                foreach ( $o in $v.options)
                {
                    setString $o.label
                }
            }
            "bool" {
                setString $o.trueLabel
                setString $o.falseLabel
            }
            "singleConditionalSelect" {
                foreach ( $co in $v.conditionalOptions)
                {
                    foreach ( $o in $co.options)
                    {
                        setString $o.label
                    }
                }
            }
        }
    }
}
"name,value" | Out-File ~/temp/strings.csv -Encoding utf8
foreach ($kv in $strings.GetEnumerator() ) {
    "$($kv.value),`"$($kv.name)`""  | Out-File ~/temp/strings.csv -Encoding utf8 -append
}

#!markdown

### Set Strings from Db

Run this to set any strings to existing values in the database

#!pwsh

# $VerbosePreference = "Continue"
$VerbosePreference = "SilentlyContinue"
$ErrorActionPreference = "stop"

$strings = Invoke-Sqlcmd -Database TransparentlyClient2 -Username sa -Password $env:local_sa_pw -ServerInstance localhost -Query "select Id, Value from Language.Strings where languageCode = 'en'"

$script:alreadySet = 0
$script:set = 0
$script:notSet = 0


$form = gc -raw ~/code/ConditionalForms/src/test/hras/hra-heart-health.json | convertfrom-json -depth 10

function setString($theValue) {
    $ret = $theValue
    $guid = [Guid]::Empty
    if ( ![Guid]::TryParse($theValue, [ref] $guid ) ) {
        $v = $strings | Where-Object { $_.value -eq $theValue }
        if ($v -eq $null) {
            Write-Warning "    Didn't find '$theValue' leaving it as-is"
            $script:notSet += 1
        } else {
            if ($v -is 'array') {
                Write-Warning "    Multiple matches for '$theValue' taking the first one"
                $v = $v[0]
            }
            $ret = $v.id
            Write-Verbose "    Set $theValue to $ret"
            $script:set += 1
        }
    } else {
        $script:alreadySet += 1
    }
    return $ret
}

Write-Host "Empty strings ids that are in db:"
$strings | ? { $_.value.id -eq '' } | Out-Host

foreach ( $s in $form.steps )
{
    Write-Verbose "$($s.name)"
    $s.nameId = setString $s.nameId
    if ((Get-Member -Input $s -Name "nextText") -and $s.nextText -ne $null) {
        $s.nextText = setString $s.nextText
    }
    if ((Get-Member -Input $s -Name "backText") -and $s.nextText -ne $null) {
        $s.backText = setString $s.backText
    }
    foreach ( $v in $s.values)
    {
        Write-Verbose "    $($v.name) $($v.type) value"
        $v.displayName = setString $v.displayName $v.name
        if (Get-Member -InputObject $v -Name "description") {
            $v.description = setString $v.description $v.name
        }
        if (Get-Member -InputObject $v -Name "placeholder") {
            $v.placeholder = setString $v.placeholder $v.name
        }
        if (Get-Member -InputObject $v -Name "subtitle") {
            $v.subtitle = setString $v.subtitle $v.name
        }
        switch ($v.type) {
            "singleSelect" {
                foreach ( $o in $v.options)
                {
                    $o.label = setString $o.label
                }
            }
            "multiSelect" {
                foreach ( $o in $v.options)
                {
                    $o.label = setString $o.label
                }
            }
            "bool" {
                $v.trueLabel = setString $v.trueLabel
                $v.falseLabel = setString $v.falseLabel
            }
            "singleConditionalSelect" {
                foreach ( $co in $v.conditionalOptions)
                {
                    foreach ( $o in $co.options)
                    {
                        $o.label = setString $o.label
                    }
                }
            }
        }
    }
}

$form | ConvertTo-Json -Depth 10 | Out-File ~/temp/form.json
Write-Host "Output in ~/temp/form.json"
Write-Host "$script:alreadySet string already have Guids"
Write-Host "Set $script:set strings to Guids"
if ($notSet) {
    Write-Host "Did not set $script:notSet strings. You need to add them before saving the form."
} else {
    Write-Host "All strings are set."
}
