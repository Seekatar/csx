#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!csharp

using static System.Console;

interface IFeatureToggle
{
    bool IsEnabled { get; }
    string GetFor(string key);
    string GetAll();
}
interface IFeatureToggleSnapshot : IFeatureToggle
{

}

class FeatureToggleSnapshot : IFeatureToggleSnapshot
{
    public bool IsEnabled { get; set; }
    public virtual string GetFor(string key) {
        return key + nameof(FeatureToggleSnapshot);
    }
    public string GetAll() {
        return GetFor("all");
    }
}

class FeatureToggle : FeatureToggleSnapshot
{
    public override string GetFor(string key) {
        return key + nameof(FeatureToggle);
    }
}

var ft = new FeatureToggle();
var fts = new FeatureToggleSnapshot();

WriteLine($"Ft {ft.GetFor("ft")}");
WriteLine($"Fts {fts.GetFor("ft")}");
