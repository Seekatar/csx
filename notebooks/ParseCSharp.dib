#!csharp

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using static System.Console;

var text = "a * 30";

var tree = CSharpSyntaxTree.ParseText(text+";");
var diag = tree.GetDiagnostics().ToList();
if (diag.Any()) {
    WriteLine(">>>>>>>>>>>>>>>>>>>>>> ERRORS");
    foreach (var d in diag) {
        WriteLine(d);
    }
    WriteLine(">>>>>>>>>>>>>>>>>>>>>> ERRORS");
} 

var root = tree.GetRoot();

WriteLine(root.ToString());
foreach (var token in root.DescendantTokens())
{
    // Kinds https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.syntaxkind?view=roslyn-dotnet-4.1.0
    WriteLine($"   {token.Kind(),-30} {token.Text}");
}
